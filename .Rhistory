home.path = Sys.getenv("HOME")
??grid.arrange
??grid
require(ggplot2)
library(ggplot2)
library(grid)
library("grid")
q()
file.edit(“.Rprofile”)
install.packages("xtable")
install.packages("MikTex")
install.packages("ggplot2")
install.packages("miktex")
install.packages("knitr")
install.packages("pandoc")
data(mtcars)
str(mtcars)
mtcars.lm <- lm(mpg ~ am, data = mtcars)
coef(mtcars.lm)
mtcars.lm
summary(mtcars.lm)
g2 = ggplot(mtcars, aes(x = carat, y = mpg))
g2 = g2 + xlab("Mass (carats)")
g2 = g2 + ylab("Price (SIN $)")
g2 = g2 + geom_point(size = 7, colour = "black", alpha=0.5)
g2 = g2 + geom_point(size = 5, colour = "blue", alpha=0.2)
g2 = g2 + geom_smooth(method = "lm", colour = "black")
g2
g2 = ggplot(mtcars, aes(x = am, y = mpg))
g2 = g2 + xlab("Mass (carats)")
g2 = g2 + ylab("Price (SIN $)")
g2 = g2 + geom_point(size = 7, colour = "black", alpha=0.5)
g2 = g2 + geom_point(size = 5, colour = "blue", alpha=0.2)
g2 = g2 + geom_smooth(method = "lm", colour = "black")
g2
library(ggplot2)
g2 = ggplot(mtcars, aes(x = am, y = mpg))
g2 = g2 + xlab("Mass (carats)")
g2 = g2 + ylab("Price (SIN $)")
g2 = g2 + geom_point(size = 7, colour = "black", alpha=0.5)
g2 = g2 + geom_point(size = 5, colour = "blue", alpha=0.2)
g2 = g2 + geom_smooth(method = "lm", colour = "black")
g2
g2 = ggplot(mtcars, aes(x = am, y = mpg))
g2 = g2 + scale_x_discrete(breaks=c("0", "1"), labels=c("automatic", "manual"))
g2 = g2 + ylab("Price (SIN $)")
g2 = g2 + geom_point(size = 7, colour = "black", alpha=0.5)
g2 = g2 + geom_point(size = 5, colour = "blue", alpha=0.2)
g2 = g2 + geom_smooth(method = "lm", colour = "black")
g2
? geom_point
summary(mtcars.lm)
?step
init_model <- lm(mpg ~ ., data = mtcars)
final_model <- step(init_model, direction = "backward")
summary(final_model)
final_model$anova
step$anova
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
shiny::runApp('C:/_PML')
install.packages('devtools')
sessionInfo()
install.packages("C:/Users/capstone/Downloads/stringr_0.6.2.tar.gz", repos = NULL, type = "source")
sessionInfo()
library(slidify)
sessionInfo()
getwd()
setwd("C:/")
author(_dataproducts)
author(adataproducts)
author("adataprod")
setwd("C:/adataprod/")
slidify("index.Rmd")
runDeck()
slidify("index.Rmd")
runDeck()
library(quantmod)
dis_env <- new.env()
getSymbols("DIS", env = sp500, src = "yahoo", from = as.Date("2015-05-01"), to = as.Date("2015-05-10"))
vDIS <- dis_env$DIS
vDIS
getSymbols("DIS", env = dis_env, src = "yahoo", from = as.Date("2015-05-01"), to = as.Date("2015-05-10"))
vDIS <- dis_env$DIS
vDIS
str(vDIS)
names(vDIS)
names(vDIS)[1]
names(vDIS)[0]
plot (vDIS)
??plot
chartSeries(vDIS,
name = "Disney",
type = "candlesticks",
theme = chartTheme("black"),
up.col = "lightblue",
dn.col = "red",
TA=NULL
)
slidify("index.Rmd")
runDeck()
slidify("index.Rmd")
slidify("index.Rmd")
runDeck()
runDeck()
slidify("index.Rmd")
slidify("index.Rmd")
runDeck()
slidify("index.Rmd")
runDeck()
runDeck()
